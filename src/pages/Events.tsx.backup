import React from 'react';
import EventManagement from '../components/EventManagement';

const Events: React.FC = () => {
  return <EventManagement />;
};

export default Events;

const Events: React.FC = () => {
  const { theme } = useTheme();
  const [showSearch, setShowSearch] = useState(false);
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');
  const [sortBy, setSortBy] = useState<'date' | 'popularity' | 'price'>('date');
  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('asc');
  const [selectedCategory, setSelectedCategory] = useState<string>('all');
  const [showFilters, setShowFilters] = useState(false);
  const [bookmarkedEvents, setBookmarkedEvents] = useState<number[]>([]);
  const [hoveredEvent, setHoveredEvent] = useState<number | null>(null);
  
  const handleResultSelect = (result: any) => {
    console.log('Selected event:', result);
  };

  const categories = [
    { id: 'all', name: 'All Events', icon: '🎯', count: 24 },
    { id: 'blockchain', name: 'Blockchain', icon: '⛓️', count: 8 },
    { id: 'defi', name: 'DeFi', icon: '💰', count: 6 },
    { id: 'nft', name: 'NFT', icon: '🎨', count: 4 },
    { id: 'web3', name: 'Web3', icon: '🌐', count: 6 }
  ];

  const events = [
    {
      id: 1,
      title: "Blockchain Security Summit 2025",
      date: "March 15, 2025",
      time: "10:00 AM - 6:00 PM",
      location: "Moscone Center, San Francisco",
      organizer: "TechCorp Events",
      attendees: 245,
      maxAttendees: 300,
      status: "upcoming",
      description: "Join industry leaders for comprehensive blockchain security discussions.",
      price: "Free",
      category: "blockchain",
      tags: ["Security", "Enterprise", "Networking"],
      image: "https://images.unsplash.com/photo-1559136555-9303baea8ebd?w=400",
      rating: 4.8,
      verified: true,
      trending: true,
      difficulty: "Intermediate"
    },
    {
      id: 2,
      title: "DeFi Innovation Conference",
      date: "March 20, 2025",
      time: "9:00 AM - 5:00 PM",
      location: "Jacob Javits Center, New York",
      organizer: "DeFi Alliance",
      attendees: 189,
      maxAttendees: 250,
      status: "upcoming",
      description: "Explore the latest innovations in decentralized finance.",
      price: "$299",
      category: "defi",
      tags: ["DeFi", "Innovation", "Finance"],
      image: "https://images.unsplash.com/photo-1642790106117-e829e14a795f?w=400",
      rating: 4.9,
      verified: true,
      trending: false,
      difficulty: "Advanced"
    },
    {
      id: 3,
      title: "Web3 Developer Bootcamp",
      date: "February 28, 2025",
      time: "Full Day Workshop",
      location: "Austin Convention Center",
      organizer: "DevCommunity",
      attendees: 156,
      maxAttendees: 200,
      status: "completed",
      description: "Hands-on workshop for building Web3 applications.",
      price: "$199",
      category: "web3",
      tags: ["Development", "Hands-on", "Web3"],
      image: "https://images.unsplash.com/photo-1551288049-bebda4e38f71?w=400",
      rating: 4.7,
      verified: true,
      trending: false,
      difficulty: "Beginner"
    },
    {
      id: 4,
      title: "NFT Art & Culture Festival",
      date: "April 5, 2025",
      time: "2:00 PM - 10:00 PM",
      location: "Los Angeles Convention Center",
      organizer: "ArtDAO",
      attendees: 89,
      maxAttendees: 150,
      status: "upcoming",
      description: "Celebrating digital art and culture in the NFT space.",
      price: "$149",
      category: "nft",
      tags: ["Art", "Culture", "NFT"],
      image: "https://images.unsplash.com/photo-1639762681485-074b7f938ba0?w=400",
      rating: 4.6,
      verified: true,
      trending: true,
      difficulty: "Beginner"
    }
  ];

  const toggleBookmark = (eventId: number) => {
    setBookmarkedEvents(prev => 
      prev.includes(eventId) 
        ? prev.filter(id => id !== eventId)
        : [...prev, eventId]
    );
  };

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case 'Beginner': return theme === 'dark' ? 'text-green-400' : 'text-green-600';
      case 'Intermediate': return theme === 'dark' ? 'text-yellow-400' : 'text-yellow-600';
      case 'Advanced': return theme === 'dark' ? 'text-red-400' : 'text-red-600';
      default: return theme === 'dark' ? 'text-white/70' : 'text-slate-600';
    }
  };

  return (
    <ResponsiveLayout>
      <div className="space-y-6">
        {/* Enhanced Header with Controls */}
        <div className="flex flex-col lg:flex-row lg:justify-between lg:items-start gap-6">
          <div className="flex-1">
            <div className="flex items-center gap-3 mb-3">
              <h1 className={`text-3xl lg:text-4xl font-bold ${
                theme === 'dark' ? 'text-white' : 'text-slate-800'
              }`}>
                Discover Events
              </h1>
              <div className="flex items-center gap-2">
                <TrendingUp className={`w-6 h-6 ${
                  theme === 'dark' ? 'text-green-400' : 'text-green-600'
                }`} />
                <Zap className={`w-5 h-5 ${
                  theme === 'dark' ? 'text-yellow-400' : 'text-yellow-600'
                }`} />
              </div>
            </div>
            <p className={`text-lg ${
              theme === 'dark' ? 'text-white/70' : 'text-slate-600'
            }`}>
              Explore verified blockchain events with AI-powered recommendations
            </p>
          </div>
          
          {/* Control Bar */}
          <div className="flex flex-wrap items-center gap-3">
            <MacOSButton
              onClick={() => setShowSearch(!showSearch)}
              variant="secondary"
              className="flex items-center gap-2"
            >
              <Search className="w-4 h-4" />
              {showSearch ? 'Hide Search' : 'Search'}
            </MacOSButton>
            
            <MacOSButton
              onClick={() => setShowFilters(!showFilters)}
              variant="secondary"
              className="flex items-center gap-2"
            >
              <Filter className="w-4 h-4" />
              Filters
            </MacOSButton>
            
            <div className="flex items-center rounded-lg overflow-hidden">
              <button
                onClick={() => setViewMode('grid')}
                className={`p-2 transition-all ${
                  viewMode === 'grid'
                    ? theme === 'dark' 
                      ? 'bg-blue-500/20 text-blue-400' 
                      : 'bg-blue-500/20 text-blue-600'
                    : theme === 'dark'
                      ? 'text-white/50 hover:text-white/70'
                      : 'text-slate-500 hover:text-slate-700'
                }`}
              >
                <Grid className="w-4 h-4" />
              </button>
              <button
                onClick={() => setViewMode('list')}
                className={`p-2 transition-all ${
                  viewMode === 'list'
                    ? theme === 'dark' 
                      ? 'bg-blue-500/20 text-blue-400' 
                      : 'bg-blue-500/20 text-blue-600'
                    : theme === 'dark'
                      ? 'text-white/50 hover:text-white/70'
                      : 'text-slate-500 hover:text-slate-700'
                }`}
              >
                <List className="w-4 h-4" />
              </button>
            </div>
          </div>
        </div>

        {/* Advanced Search */}
        {showSearch && (
          <GlassCard className="p-6">
            <AdvancedSearch 
              onResultSelect={handleResultSelect}
              initialQuery=""
            />
          </GlassCard>
        )}

        {/* Filter Panel */}
        {showFilters && (
          <GlassCard className="p-6">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              {/* Categories */}
              <div>
                <h3 className={`font-semibold mb-3 ${
                  theme === 'dark' ? 'text-white' : 'text-slate-800'
                }`}>Categories</h3>
                <div className="space-y-2">
                  {categories.map((category) => (
                    <button
                      key={category.id}
                      onClick={() => setSelectedCategory(category.id)}
                      className={`w-full flex items-center justify-between p-3 rounded-lg transition-all ${
                        selectedCategory === category.id
                          ? theme === 'dark'
                            ? 'bg-blue-500/20 text-blue-400 border border-blue-400/30'
                            : 'bg-blue-500/20 text-blue-600 border border-blue-500/30'
                          : theme === 'dark'
                            ? 'bg-white/5 text-white/70 hover:bg-white/10'
                            : 'bg-slate-50 text-slate-600 hover:bg-slate-100'
                      }`}
                    >
                      <div className="flex items-center gap-2">
                        <span>{category.icon}</span>
                        <span className="text-sm font-medium">{category.name}</span>
                      </div>
                      <span className={`text-xs px-2 py-1 rounded-full ${
                        theme === 'dark' ? 'bg-white/10 text-white/50' : 'bg-slate-200 text-slate-500'
                      }`}>
                        {category.count}
                      </span>
                    </button>
                  ))}
                </div>
              </div>

              {/* Sort Options */}
              <div>
                <h3 className={`font-semibold mb-3 ${
                  theme === 'dark' ? 'text-white' : 'text-slate-800'
                }`}>Sort By</h3>
                <div className="space-y-2">
                  {['date', 'popularity', 'price'].map((option) => (
                    <button
                      key={option}
                      onClick={() => setSortBy(option as any)}
                      className={`w-full flex items-center justify-between p-3 rounded-lg transition-all ${
                        sortBy === option
                          ? theme === 'dark'
                            ? 'bg-purple-500/20 text-purple-400 border border-purple-400/30'
                            : 'bg-purple-500/20 text-purple-600 border border-purple-500/30'
                          : theme === 'dark'
                            ? 'bg-white/5 text-white/70 hover:bg-white/10'
                            : 'bg-slate-50 text-slate-600 hover:bg-slate-100'
                      }`}
                    >
                      <span className="text-sm font-medium capitalize">{option}</span>
                      {sortBy === option && (
                        <button
                          onClick={(e) => {
                            e.stopPropagation();
                            setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');
                          }}
                        >
                          {sortOrder === 'asc' ? 
                            <SortAsc className="w-4 h-4" /> : 
                            <SortDesc className="w-4 h-4" />
                          }
                        </button>
                      )}
                    </button>
                  ))}
                </div>
              </div>

              {/* Quick Filters */}
              <div>
                <h3 className={`font-semibold mb-3 ${
                  theme === 'dark' ? 'text-white' : 'text-slate-800'
                }`}>Quick Filters</h3>
                <div className="space-y-2">
                  <label className="flex items-center gap-2">
                    <input type="checkbox" className="rounded" />
                    <span className={`text-sm ${
                      theme === 'dark' ? 'text-white/70' : 'text-slate-600'
                    }`}>Free Events Only</span>
                  </label>
                  <label className="flex items-center gap-2">
                    <input type="checkbox" className="rounded" />
                    <span className={`text-sm ${
                      theme === 'dark' ? 'text-white/70' : 'text-slate-600'
                    }`}>Verified Organizers</span>
                  </label>
                  <label className="flex items-center gap-2">
                    <input type="checkbox" className="rounded" />
                    <span className={`text-sm ${
                      theme === 'dark' ? 'text-white/70' : 'text-slate-600'
                    }`}>Available Spots</span>
                  </label>
                  <label className="flex items-center gap-2">
                    <input type="checkbox" className="rounded" />
                    <span className={`text-sm ${
                      theme === 'dark' ? 'text-white/70' : 'text-slate-600'
                    }`}>This Week</span>
                  </label>
                </div>
              </div>
            </div>
          </GlassCard>
        )}

        {/* Enhanced Stats Cards */}
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
          <GlassCard className="p-4 text-center group hover:scale-105 transition-all duration-300">
            <div className="flex items-center justify-center mb-2">
              <Calendar className={`w-8 h-8 ${
                theme === 'dark' ? 'text-blue-400' : 'text-blue-600'
              }`} />
            </div>
            <div className={`text-2xl font-bold mb-1 ${
              theme === 'dark' ? 'text-white' : 'text-slate-800'
            }`}>24</div>
            <div className={`text-sm ${
              theme === 'dark' ? 'text-white/60' : 'text-slate-600'
            }`}>Upcoming Events</div>
          </GlassCard>

          <GlassCard className="p-4 text-center group hover:scale-105 transition-all duration-300">
            <div className="flex items-center justify-center mb-2">
              <Users className={`w-8 h-8 ${
                theme === 'dark' ? 'text-green-400' : 'text-green-600'
              }`} />
            </div>
            <div className={`text-2xl font-bold mb-1 ${
              theme === 'dark' ? 'text-white' : 'text-slate-800'
            }`}>3.2K</div>
            <div className={`text-sm ${
              theme === 'dark' ? 'text-white/60' : 'text-slate-600'
            }`}>Total Attendees</div>
          </GlassCard>

          <GlassCard className="p-4 text-center group hover:scale-105 transition-all duration-300">
            <div className="flex items-center justify-center mb-2">
              <MapPin className={`w-8 h-8 ${
                theme === 'dark' ? 'text-purple-400' : 'text-purple-600'
              }`} />
            </div>
            <div className={`text-2xl font-bold mb-1 ${
              theme === 'dark' ? 'text-white' : 'text-slate-800'
            }`}>45</div>
            <div className={`text-sm ${
              theme === 'dark' ? 'text-white/60' : 'text-slate-600'
            }`}>Cities Worldwide</div>
          </GlassCard>

          <GlassCard className="p-4 text-center group hover:scale-105 transition-all duration-300">
            <div className="flex items-center justify-center mb-2">
              <Award className={`w-8 h-8 ${
                theme === 'dark' ? 'text-yellow-400' : 'text-yellow-600'
              }`} />
            </div>
            <div className={`text-2xl font-bold mb-1 ${
              theme === 'dark' ? 'text-white' : 'text-slate-800'
            }`}>98%</div>
            <div className={`text-sm ${
              theme === 'dark' ? 'text-white/60' : 'text-slate-600'
            }`}>Verification Rate</div>
          </GlassCard>
        </div>

        {/* Enhanced Events Grid */}
        <div className={`grid gap-6 ${
          viewMode === 'grid' 
            ? 'grid-cols-1 lg:grid-cols-2 xl:grid-cols-3' 
            : 'grid-cols-1'
        }`}>
          {events.map((event) => (
            <GlassCard 
              key={event.id} 
              className={`relative overflow-hidden group transition-all duration-500 hover:scale-[1.02] hover:shadow-2xl ${
                viewMode === 'list' ? 'flex gap-6' : ''
              }`}
              onMouseEnter={() => setHoveredEvent(event.id)}
              onMouseLeave={() => setHoveredEvent(null)}
            >
              {/* Event Image */}
              <div className={`relative ${
                viewMode === 'list' ? 'w-48 h-32' : 'h-48'
              } overflow-hidden`}>
                <img 
                  src={event.image} 
                  alt={event.title}
                  className="w-full h-full object-cover transition-transform duration-500 group-hover:scale-110"
                />
                
                {/* Image Overlays */}
                <div className="absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-transparent" />
                
                {/* Status Badge */}
                <div className="absolute top-3 left-3">
                  <span className={`px-3 py-1 rounded-full text-xs font-semibold backdrop-blur-sm ${
                    event.status === 'upcoming' 
                      ? 'bg-blue-500/80 text-white'
                      : event.status === 'completed'
                      ? 'bg-gray-500/80 text-white'
                      : 'bg-green-500/80 text-white'
                  }`}>
                    {event.status === 'upcoming' ? '📅 Upcoming' : 
                     event.status === 'completed' ? '✓ Completed' : '🔴 Live'}
                  </span>
                </div>

                {/* Action Buttons */}
                <div className="absolute top-3 right-3 flex gap-2 opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                  <button
                    onClick={() => toggleBookmark(event.id)}
                    className={`p-2 rounded-full backdrop-blur-sm transition-colors ${
                      bookmarkedEvents.includes(event.id)
                        ? 'bg-red-500/80 text-white'
                        : 'bg-white/20 text-white hover:bg-white/30'
                    }`}
                  >
                    {bookmarkedEvents.includes(event.id) ? 
                      <Heart className="w-4 h-4 fill-current" /> : 
                      <Heart className="w-4 h-4" />
                    }
                  </button>
                  <button className="p-2 rounded-full bg-white/20 text-white hover:bg-white/30 backdrop-blur-sm transition-colors">
                    <Share2 className="w-4 h-4" />
                  </button>
                </div>

                {/* Trending Badge */}
                {event.trending && (
                  <div className="absolute bottom-3 left-3">
                    <span className="flex items-center gap-1 px-2 py-1 rounded-full bg-orange-500/80 text-white text-xs font-semibold backdrop-blur-sm">
                      <TrendingUp className="w-3 h-3" />
                      Trending
                    </span>
                  </div>
                )}

                {/* Rating */}
                <div className="absolute bottom-3 right-3">
                  <div className="flex items-center gap-1 px-2 py-1 rounded-full bg-black/50 backdrop-blur-sm">
                    <Star className="w-3 h-3 text-yellow-400 fill-current" />
                    <span className="text-white text-xs font-semibold">{event.rating}</span>
                  </div>
                </div>
              </div>

              {/* Event Content */}
              <div className={`p-6 ${viewMode === 'list' ? 'flex-1' : ''}`}>
                {/* Header */}
                <div className="flex items-start justify-between mb-3">
                  <div className="flex-1">
                    <h3 className={`text-lg font-bold mb-2 ${
                      theme === 'dark' ? 'text-white' : 'text-slate-800'
                    }`}>
                      {event.title}
                    </h3>
                    
                    <div className="flex items-center gap-2 mb-2">
                      <span className={`text-sm font-medium ${
                        theme === 'dark' ? 'text-blue-400' : 'text-blue-600'
                      }`}>
                        by {event.organizer}
                      </span>
                      {event.verified && (
                        <div className="flex items-center gap-1">
                          <div className="w-4 h-4 rounded-full bg-blue-500 flex items-center justify-center">
                            <span className="text-white text-xs">✓</span>
                          </div>
                          <span className={`text-xs ${
                            theme === 'dark' ? 'text-blue-400' : 'text-blue-600'
                          }`}>Verified</span>
                        </div>
                      )}
                    </div>
                  </div>
                  
                  <div className={`text-right ${getDifficultyColor(event.difficulty)}`}>
                    <div className="text-xs font-medium">{event.difficulty}</div>
                  </div>
                </div>

                {/* Event Details */}
                <div className="space-y-2 mb-4">
                  <div className={`flex items-center gap-2 text-sm ${
                    theme === 'dark' ? 'text-white/70' : 'text-slate-600'
                  }`}>
                    <Calendar className="w-4 h-4" />
                    <span>{event.date}</span>
                  </div>
                  <div className={`flex items-center gap-2 text-sm ${
                    theme === 'dark' ? 'text-white/70' : 'text-slate-600'
                  }`}>
                    <Clock className="w-4 h-4" />
                    <span>{event.time}</span>
                  </div>
                  <div className={`flex items-center gap-2 text-sm ${
                    theme === 'dark' ? 'text-white/70' : 'text-slate-600'
                  }`}>
                    <MapPin className="w-4 h-4" />
                    <span>{event.location}</span>
                  </div>
                  <div className={`flex items-center gap-2 text-sm ${
                    theme === 'dark' ? 'text-white/70' : 'text-slate-600'
                  }`}>
                    <DollarSign className="w-4 h-4" />
                    <span className="font-semibold">{event.price}</span>
                  </div>
                </div>

                <p className={`text-sm mb-4 line-clamp-2 ${
                  theme === 'dark' ? 'text-white/60' : 'text-slate-600'
                }`}>
                  {event.description}
                </p>

                {/* Tags */}
                <div className="flex flex-wrap gap-2 mb-4">
                  {event.tags.slice(0, 3).map((tag, index) => (
                    <span 
                      key={index}
                      className={`px-2 py-1 rounded-lg text-xs font-medium ${
                        theme === 'dark' 
                          ? 'bg-white/10 text-white/70'
                          : 'bg-slate-100 text-slate-600'
                      }`}
                    >
                      {tag}
                    </span>
                  ))}
                  {event.tags.length > 3 && (
                    <span className={`px-2 py-1 rounded-lg text-xs ${
                      theme === 'dark' ? 'text-white/50' : 'text-slate-500'
                    }`}>
                      +{event.tags.length - 3} more
                    </span>
                  )}
                </div>

                {/* Attendee Progress */}
                <div className="mb-4">
                  <div className="flex justify-between items-center text-sm mb-2">
                    <span className={`flex items-center gap-1 ${
                      theme === 'dark' ? 'text-white/70' : 'text-slate-600'
                    }`}>
                      <Users className="w-4 h-4" />
                      Attendees
                    </span>
                    <span className={`font-semibold ${
                      theme === 'dark' ? 'text-white' : 'text-slate-800'
                    }`}>
                      {event.attendees}/{event.maxAttendees}
                    </span>
                  </div>
                  <div className={`w-full rounded-full h-2 ${
                    theme === 'dark' ? 'bg-white/10' : 'bg-slate-200'
                  }`}>
                    <div 
                      className="h-2 rounded-full bg-gradient-to-r from-blue-500 to-purple-500 transition-all duration-500"
                      style={{ width: `${(event.attendees / event.maxAttendees) * 100}%` }}
                    />
                  </div>
                  <div className={`text-xs mt-1 ${
                    theme === 'dark' ? 'text-white/50' : 'text-slate-500'
                  }`}>
                    {Math.round((event.attendees / event.maxAttendees) * 100)}% capacity
                  </div>
                </div>

                {/* Enhanced Action Buttons */}
                <div className="flex gap-2">
                  <MacOSButton 
                    className="flex-1"
                    variant={event.status === 'completed' ? 'secondary' : 'primary'}
                  >
                    <div className="flex items-center justify-center gap-2">
                      {event.status === 'completed' ? (
                        <>
                          <Award className="w-4 h-4" />
                          <span>View Certificate</span>
                        </>
                      ) : event.status === 'upcoming' ? (
                        <>
                          <Calendar className="w-4 h-4" />
                          <span>Register Now</span>
                        </>
                      ) : (
                        <>
                          <Zap className="w-4 h-4" />
                          <span>Join Live</span>
                        </>
                      )}
                    </div>
                  </MacOSButton>
                  
                  <MacOSButton variant="secondary" className="px-3">
                    <Eye className="w-4 h-4" />
                  </MacOSButton>
                </div>
              </div>

              {/* Hover Effect Overlay */}
              {hoveredEvent === event.id && (
                <div className="absolute inset-0 bg-gradient-to-br from-blue-500/5 to-purple-500/5 pointer-events-none transition-opacity duration-300" />
              )}
            </GlassCard>
          ))}
        </div>

        {/* Enhanced Call to Action */}
        <GlassCard className="relative overflow-hidden">
          <div className="absolute inset-0 bg-gradient-to-br from-blue-500/10 to-purple-500/10" />
          <div className="relative p-12 text-center">
            <div className="max-w-3xl mx-auto">
              <div className="flex items-center justify-center gap-3 mb-4">
                <Zap className={`w-8 h-8 ${
                  theme === 'dark' ? 'text-yellow-400' : 'text-yellow-600'
                }`} />
                <h2 className={`text-3xl font-bold ${
                  theme === 'dark' ? 'text-white' : 'text-slate-800'
                }`}>
                  Host Your Own Event
                </h2>
                <Zap className={`w-8 h-8 ${
                  theme === 'dark' ? 'text-yellow-400' : 'text-yellow-600'
                }`} />
              </div>
              
              <p className={`text-lg mb-8 ${
                theme === 'dark' ? 'text-white/70' : 'text-slate-600'
              }`}>
                Create verifiable attendance certificates for your events. 
                Build trust and provide lasting value to your attendees with blockchain verification.
              </p>
              
              <div className="flex flex-col sm:flex-row gap-4 justify-center">
                <MacOSButton size="lg" className="flex items-center gap-2">
                  <Award className="w-5 h-5" />
                  <span>Create Event</span>
                </MacOSButton>
                <MacOSButton variant="secondary" size="lg" className="flex items-center gap-2">
                  <Eye className="w-5 h-5" />
                  <span>Learn More</span>
                </MacOSButton>
              </div>
            </div>
          </div>
        </GlassCard>
      </div>
    </ResponsiveLayout>
  );
};

export default Events;
